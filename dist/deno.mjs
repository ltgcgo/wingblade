// Copyright (c) Lightingale WingBlade Author(s) 2023.
// Licensed under GNU LGPL 3.0 or later.
"use strict";let j=Object.defineProperty;let H=(t,e,r)=>e in t?j(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r;let c=(t,e,r)=>(H(t,typeof e!="symbol"?e+"":e,r),r);let S={args:Deno.args,main:Deno.mainModule};let g={version:"0.1"};let W={query:t=>Deno.permissions.query(t),request:t=>Deno.permissions.request(t),revoke:t=>Deno.permissions.revoke(t),querySync:t=>Deno.permissions.querySync(t),requestSync:t=>Deno.permissions.requestSync(t),revokeSync:t=>Deno.permissions.revokeSync(t)},h,T=(h=class{static get memory(){let{rss:t,heapTotal:e,heapUsed:r,external:s}=Deno.memoryUsage(),{total:n,free:i}=Deno.systemMemoryInfo();return{rss:t,heapTotal:e,heapUsed:r,external:s,total:n,free:i}}static exit(t=0){Deno.exit(t)}static ifMap(){let t={},e=Deno.networkInterfaces();for(let r=0;r<e.length;r++){let{family:s,name:n,address:i,netmask:o,scopeid:a,cidr:l,mac:d}=e[r];t[n]||(t[n]=[]),d=="00:00:00:00:00:00"&&(d=void 0),t[n].push({address:i,cidr:l,netmask:o,family:s,mac:d,scope_id:a})}return t}},c(h,"os",Deno.build.os),c(h,"variant","Deno"),c(h,"version",Deno.version.deno),c(h,"versions",{deno:Deno.version.deno,v8:Deno.version.v8,wingblade:g.version}),c(h,"persist",!0),c(h,"networkDefer",!1),c(h,"cores",8),c(h,"perms",W),c(h,"noColor",Deno.noColor),c(h,"pid",Deno.pid),c(h,"ppid",Deno.ppid),c(h,"chdir",Deno.chdir),c(h,"cwd",Deno.cwd),c(h,"execPath",Deno.execPath()),c(h,"gid",Deno.gid),c(h,"hostname",Deno.hostname),c(h,"interfaces",Deno.networkInterfaces),c(h,"loadavg",Deno.loadavg),c(h,"memoryUsage",Deno.memoryUsage),c(h,"osUptime",Deno.uptime),c(h,"systemMemoryInfo",Deno.systemMemoryInfo),c(h,"uid",Deno.uid),h),v="delete,get,has,set,toObject".split(","),x=new Proxy({get:(t,e)=>Deno.env.get(t)||e,set:(t,e)=>{Deno.env.set(t,e)},delete:t=>{Deno.env.delete(t)},has:t=>Deno.env.has(t),toObject:()=>Deno.env.toObject()},{get:(t,e)=>v.indexOf(e)<0&&e.constructor==String?t.get(e):t[e],set:(t,e,r)=>{if(v.indexOf(e)<0)if(e.constructor==String)t.set(e,r);else throw new TypeError("Invalid type for key");else throw new Error("Tried to write protected properties")},has:(t,e)=>v.indexOf(e)<0?e.constructor==String?t.has(e):t[e]!=null:!1,deleteProperty:(t,e)=>{if(v.indexOf(e)<0)if(e.constructor==String)t.delete(e);else throw new TypeError("Invalid type for key");else throw new Error("Tried to delete protected properties")}});let fe=Symbol("cc.ltgc.wingblade:internal.file");let O="auto,POSIX,DOS,URL".split(",");let m,_=(m=class{static async read(t,e){return await Deno.readFile(t,e)}static async write(t,e,r){await Deno.writeFile(t,e,r)}static get variant(){return Deno.build.os=="windows"?this.DOS:this.POSIX}static detect(t){let e=this,r=t.charCodeAt(0);if(t[1]==":"&&r>64&&r<91)return e.DOS;try{let s=new URL(t);return e.URL}catch{return e.POSIX}}static delimiter(t){return" /\\/"[t||this.variant]}static basename(t,e){}static isAbsolute(t){}static relative(t,e){let r=this;t=t||Deno.cwd(),e=e||Deno.cwd();let s=r.detect(t),n=r.detect(e);if(n!=s)throw new SyntaxError(`Cannot mix a ${O[n]} path with a ${O[s]} path`);let i=r.delimiter(s),o=t.split(i),a=e.split(i);if(o[o.length-1]?.length||o.pop(),s==r.DOS&&o[0]!=a[0])throw new Error("Cannot switch between different drives on DOS");let l=0;return o.forEach((d,p)=>{d==a[p]&&l++}),`${`..${i}`.repeat(o.length-l)||`.${i}`}${a.slice(l).join(i)}`}static resolve(t="./"){Deno.realPathSync(t)}static normalize(t,e){let r=this,s=r.detect(t),n=r.delimiter(s);e||(e=s);let i=r.delimiter(e),o=i.repeat(2);for(;t.indexOf(o)>-1;)t=t.replace(o,delim);let a=t.split(n);if(n=="\\"&&i=="/"&&a[0][1]==":"&&(a[0]==r.fakeDOS?a[0]="":(a[0]=a[0][0].toLowerCase(),a.splice(0,0,...r.fakePosix))),n=="/"&&i=="\\"){let l=!0;if(a[r.fakePosix.length]?.length==1){let d=0;r.fakePosix.forEach((p,w)=>{a[w]==p&&d++}),d==r.fakePosix.length&&(l=!1,a.splice(0,r.fakePosix.length),a[0]=`${a[0].toUpperCase()}:`)}l&&(a[0]=r.fakeDOS)}for(let l=a.length-1;l>0;l--)switch(a[l]){case"..":{a.splice(l-1,2),l--;break}case".":{a.splice(l,1);break}}if(e==r.POSIX)switch(a[0]){case"":case".":case"..":break;default:a.unshift(".")}return a.join(i)}},c(m,"POSIX",1),c(m,"DOS",2),c(m,"URL",3),c(m,"fakePosix","/mnt/windev".split("/")),c(m,"fakeDOS","Z:"),m),C=_;let G=class extends EventTarget{#e;#t;#r;#s;#n;#a;#i;#o;#h=[];#l=[];#c=3;#d=!1;CONNECTING=0;OPEN=1;CLOSING=2;CLOSED=3;get protocol(){return this.#e}get hostname(){return this.#t}get port(){return this.#r}get readyState(){return this.#c}get source(){return this.#i}get sink(){return this.#o}addEventListener(t,e,r){t=="open"&&this.readyState==this.OPEN&&e.call(this,new Event("open")),super.addEventListener(t,e,r)}send(t){if(this.#d)throw new Error("Cannot enqueue or send data on a freed connection");this.#c!=this.OPEN?this.#h.push(t):this.#o?.desiredSize<0||this.#l.length?(this.#l.push(t),this.#o.ready.then(()=>{let e=this.#l.shift();e&&this.#o.write(e)})):this.#o.write(t)}async connect(){if(this.#d)throw new Error("Cannot restart a freed connection");if(this.#c<this.CLOSING){console.debug(`${this.#e.toUpperCase()} connection is already open.`);return}switch(this.#c=this.CONNECTING,this.#e){case"tcp":{let t=await Deno.connect({hostname:this.#t,port:this.#r});this.#s=t,this.#n=t.readable,this.#i=t.readable.getReader(),this.#a=t.writable,this.#o=t.writable.getWriter();break}default:throw this.free(),new Error(`Invalid protocol "${this.#e}"`)}this.#c=this.OPEN,this.dispatchEvent(new Event("open")),(async()=>{try{let t=!0;for(;t;){let{value:e,done:r}=await this.#i.read();t=!r,e&&this.dispatchEvent(new MessageEvent("data",{data:e})),r&&this.close()}}catch(t){this.dispatchEvent(new ErrorEvent("error",{message:t.message,error:t})),this.close()}})()}close(){if(this.#c>this.OPEN){console.debug(`${this.#e.toUpperCase()} connection is already closed.`);return}switch(this.#c=this.CLOSING,this.#e){case"tcp":{let{rid:t}=this.#s;Deno.resources()[t]&&this.#s?.close();break}default:throw new Error(`Invalid protocol "${this.#e}"`)}this.#c=this.CLOSED,this.dispatchEvent(new Event("close"))}free(){return this.close(),this.#d=!0,this.#h.splice(0,this.#h.length)}constructor({proto:t,host:e,port:r},s){super(),t=t||"tcp",e=e||"127.0.0.1",r=r||80,this.#e=t,this.#t=e,this.#r=r,this.addEventListener("open",async()=>{this.#h.forEach(n=>{this.send(n)})}),this.addEventListener("close",()=>{this.#l.length&&this.#h.splice(0,0,this.#l.splice(0,this.#l.length))}),s&&this.connect()}},V=class extends EventTarget{#e;#t;#r;#s;#n;#a;#i=1;OPEN=1;CLOSING=2;CLOSED=3;get ip(){return this.#e.hostname||"0.0.0.0"}get port(){return this.#e.port||0}get readyState(){return this.#i}get source(){return this.#n}get sink(){return this.#a}send(t){this.#i==1&&this.#a.write(t)}close(){this.#i=this.CLOSING,this.#t.close(),this.#i=this.CLOSED,this.dispatchEvent(new Event("close"))}addEventListener(t,e,r){t=="open"&&this.readyState==this.OPEN&&e.call(this,new Event("open")),super.addEventListener(t,e,r)}constructor(t){super(),this.#e=t.remoteAddr,this.#t=t,this.#r=t.readable,this.#n=t.readable.getReader(),this.#s=t.writable,this.#a=t.writable.getWriter(),(async()=>{let e=!0;for(;e;){let{value:r,done:s}=await this.#n.read();e=!s,r&&this.dispatchEvent(new MessageEvent("data",{data:r})),s&&this.close()}})()}},X=class extends EventTarget{#e;#t;#r;#s;#n;#a=!1;#i=!1;get active(){return this.#a}get proto(){return this.#e}get host(){return this.#t}get port(){return this.#r}get reuse(){return this.#s}async listen(){if(this.#i)throw new Error("Cannot restart a freed connection");if(this.#a){console.debug(`${this.#e.toUpperCase()} server on ${this.#t}:${this.#r} is already active.`);return}let t=this;try{switch(this.#e){case"tcp":{t.#n=Deno.listen({hostname:t.#t,port:t.#r,reusePort:t.#s}),t.dispatchEvent(new Event("listen"));for await(let e of t.#n.accept())t.dispatchEvent(new MessageEvent("accept"),{data:new V(e)});break}default:throw t.free(),new Error(`Invalid protocol "${t.#e}"`)}}catch{this.dispatchEvent(new Event("close"))}}close(){if(!this.#a){console.debug(`${this.#e.toUpperCase()} server on ${this.#t}:${this.#r} is already closed.`);return}switch(this.#e){case"tcp":{this.#n?.close();break}}}free(){this.close(),this.#i=!0}constructor({proto:t,host:e,port:r,reuse:s},n){super(),t=t||"tcp",e=e||"0.0.0.0",r=r||8e3,this.#e=t,this.#t=e,this.#r=r,this.#s=s,this.addEventListener("listen",()=>{console.error(`WingBlade ${t.toUpperCase()} server listening on ${e}:${r}`)}),n&&this.listen()}},E,z=(E=class{},c(E,"RawClient",G),c(E,"RawServer",X),E),P=z;function M(){let t,e="pending",r=new Promise((s,n)=>{t={async resolve(i){await i,e="fulfilled",s(i)},reject(i){e="rejected",n(i)}}});return Object.defineProperty(r,"state",{get:()=>e}),Object.assign(r,t)}function Y(t,e={}){let{signal:r,persistent:s}=e;return r?.aborted?Promise.reject(new DOMException("Delay was aborted.","AbortError")):new Promise((n,i)=>{let o=()=>{clearTimeout(l),i(new DOMException("Delay was aborted.","AbortError"))},l=setTimeout(()=>{r?.removeEventListener("abort",o),n()},t);if(r?.addEventListener("abort",o,{once:!0}),s===!1)try{Deno.unrefTimer(l)}catch(d){if(!(d instanceof ReferenceError))throw d;console.error("`persistent` option is only available in Deno")}})}var R=class{#e=0;#t=[];#r=[];#s=M();add(e){++this.#e,this.#n(e[Symbol.asyncIterator]())}async#n(e){try{let{value:r,done:s}=await e.next();s?--this.#e:this.#t.push({iterator:e,value:r})}catch(r){this.#r.push(r)}this.#s.resolve()}async*iterate(){for(;this.#e>0;){await this.#s;for(let e=0;e<this.#t.length;e++){let{iterator:r,value:s}=this.#t[e];yield s,this.#n(r)}if(this.#r.length){for(let e of this.#r)throw e;this.#r.length=0}this.#t.length=0,this.#s=M()}}[Symbol.asyncIterator](){return this.iterate()}},b="Server closed",J=5,K=1e3,L=class{#e;#t;#r;#s=!1;#n=new Set;#a=new AbortController;#i=new Set;#o;constructor(e){this.#e=e.port,this.#t=e.hostname,this.#r=e.handler,this.#o=e.onError??function(r){return console.error(r),new Response("Internal Server Error",{status:500})}}async serve(e){if(this.#s)throw new Deno.errors.Http(b);this.#f(e);try{return await this.#c(e)}finally{this.#u(e);try{e.close()}catch{}}}async listenAndServe(){if(this.#s)throw new Deno.errors.Http(b);let e=Deno.listen({port:this.#e??80,hostname:this.#t??"0.0.0.0",transport:"tcp"});return await this.serve(e)}async listenAndServeTls(e,r){if(this.#s)throw new Deno.errors.Http(b);let s=Deno.listenTls({port:this.#e??443,hostname:this.#t??"0.0.0.0",certFile:e,keyFile:r,transport:"tcp"});return await this.serve(s)}close(){if(this.#s)throw new Deno.errors.Http(b);this.#s=!0;for(let e of this.#n)try{e.close()}catch{}this.#n.clear(),this.#a.abort();for(let e of this.#i)this.#d(e);this.#i.clear()}get closed(){return this.#s}get addrs(){return Array.from(this.#n).map(e=>e.addr)}async#h(e,r){let s;try{if(s=await this.#r(e.request,r),s.bodyUsed&&s.body!==null)throw new TypeError("Response body already consumed.")}catch(n){s=await this.#o(n)}try{await e.respondWith(s)}catch{}}async#l(e,r){for(;!this.#s;){let s;try{s=await e.nextRequest()}catch{break}if(s===null)break;this.#h(s,r)}this.#d(e)}async#c(e){let r;for(;!this.#s;){let s;try{s=await e.accept()}catch(o){if(o instanceof Deno.errors.BadResource||o instanceof Deno.errors.InvalidData||o instanceof Deno.errors.UnexpectedEof||o instanceof Deno.errors.ConnectionReset||o instanceof Deno.errors.NotConnected){r?r*=2:r=J,r>=1e3&&(r=K);try{await Y(r,{signal:this.#a.signal})}catch(a){if(!(a instanceof DOMException&&a.name==="AbortError"))throw a}continue}throw o}r=void 0;let n;try{n=Deno.serveHttp(s)}catch{continue}this.#p(n);let i={localAddr:s.localAddr,remoteAddr:s.remoteAddr};this.#l(n,i)}}#d(e){this.#w(e);try{e.close()}catch{}}#f(e){this.#n.add(e)}#u(e){this.#n.delete(e)}#p(e){this.#i.add(e)}#w(e){this.#i.delete(e)}};function Q(t){return t==="0.0.0.0"?"localhost":t}async function $(t,e={}){let r=e.port??8e3,s=e.hostname??"0.0.0.0",n=new L({port:r,hostname:s,handler:t,onError:e.onError});e?.signal?.addEventListener("abort",()=>n.close(),{once:!0});let i=Deno.listen({port:r,hostname:s,transport:"tcp"}),o=n.serve(i);return r=n.addrs[0].port,"onListen"in e?e.onListen?.({port:r,hostname:s}):console.log(`Listening on http://${Q(s)}:${r}/`),await o}var A='<!DOCTYPE html><head><meta charset="utf-8"/><title>WingBlade error</title><style>body{background:#000;color:#ccc;}</style></head><body><div style="width:75vw;min-width:360px;max-width:1080px;margin:0 auto;"><p>WingBlade has encountered an error on ${runtime}.</p><pre>${stackTrace}</pre></div></body>\n';let ee=class{static serve(t,e={}){let r=`file://${Deno.cwd()}`;return e?.onListen||(e.onListen=function({port:s,hostname:n}){n=="0.0.0.0"&&(n="127.0.0.1"),console.error(`WingBlade serving at http://${n}:${s}`)}),e?.hostname||(e.hostname="0.0.0.0"),e?.port||(e.port=8e3),$(async(s,n)=>{try{let i=await t(s,n);return i?.constructor==Response?i:new Response(JSON.stringify(i),{headers:{"Content-Type":"text/plain"}})}catch(i){return console.error(`Request error at ${s.method} ${s.url}
${i.stack}`),new Response(A.replace("${runtime}",WingBlade.rt.variant).replace("${stackTrace}",i.stack.replaceAll(r,"wingblade:app")),{status:502,headers:{"Content-Type":"text/html"}})}},e)}static acceptWs(t,e){return Deno.upgradeWebSocket(t,e)}},I=ee;let te=class{static randomInt(t){return Math.floor(Math.random()*t)}static sleep(t,e=0){return new Promise(r=>{AbortSignal.timeout(t+Math.floor(e*Math.random())).addEventListener("abort",()=>{r()})})}},U=te;if(self.ReadableStream)ReadableStream.prototype.array=async function(){let t=this.getReader(),e=[],r=!0;for(e.byteLength=0;r;){let{done:s,value:n}=await t.read();s&&(r=!1),n?.byteLength&&(e.push(new Uint8Array(n.buffer).subarray(n.byteOffset,n.byteLength)),e.byteLength+=n.byteLength)}return e},ReadableStream.prototype.arrayBuffer=async function(){let t=await this.array(),e=new Uint8Array(t.byteLength),r=0;return t.forEach(s=>{e.set(s,r),r+=s.byteLength}),e.buffer},ReadableStream.prototype.blob=async function(t="application/octet-stream"){return new Blob(await this.array(),{type:t})},ReadableStream.prototype.text=async function(t="utf-8"){let e=await this.arrayBuffer();return new TextDecoder(t,{fatal:!0}).decode(e)},ReadableStream.prototype.json=async function(t){return JSON.parse(await this.text(t))};else throw"ReadableStream not present in this runtime.";let re=class{#e=!1;#t;#r;resolve(e){let r=this;r.resolved||(r.#e=!0,r.#t=e,r.#r&&(r.#r(e),r.#r=void 0))}wait(){let e=this;return e.#e?new Promise(r=>{r(e.#t)}):new Promise(r=>{e.#r=r})}},se=class{#e=256;#t=0;#r;#s;#n;#a;#i;#o=new re;alwaysCopy=!1;get chunk(){return this.#e}get sink(){return this.#r}get source(){return this.#n}attach(e){let r=this;r.#r=e,r.#s=e.getReader(),r.#o.resolve()}constructor(e=1024,r=!1){let s=this;s.#e=e,s.alwaysCopy=r,s.#i=new ByteLengthQueuingStrategy({highWaterMark:e});let n=0,i;s.#n=new ReadableStream({cancel:async o=>{await s.#r.cancel(o)},start:async o=>{},pull:async o=>{s.#t++;let a=!1;await s.#o.wait();let l=!0,d=0;for(;l&&d<s.#e;){let{done:p,value:w}=await s.#s.read(),q=w?.byteLength||0;d+=q;let B=0,f,k=!0;if(w?.byteLength)for(f=new Uint8Array(w.buffer,w.byteOffset,w.byteLength);k;){let y;if(f.byteLength<1&&(k=!1),n){let D=f.subarray(0,s.#e-n);i.set(D,n),n+D.byteLength<s.#e?n+=f.byteLength:(y=i,n=0,i=new Uint8Array(s.#e)),f=f.subarray(D.byteLength)}else f.byteLength<s.#e?(n=f.byteLength,i?.constructor!=Uint8Array&&(i=new Uint8Array(s.#e)),i.set(f)):s.alwaysCopy?(y=new Uint8Array(s.#e),y.set(f.subarray(0,s.#e))):y=f.subarray(0,s.#e),f=f.subarray(s.#e);y&&(o.enqueue(new Uint8Array(y)),B+=y?.byteLength)}p&&(n&&o.enqueue(i.subarray(0,n)),o.close(),l=!1)}}},this.#i)}},N=se;let F=function(t){self.navigator||(self.navigator={});let e=navigator;switch(e.userAgent||(e.userAgent=`${t.rt.variant}/${t.rt.version}`),e.language||(e.language=null),e.languages?.constructor||(e.languages=[]),e.hardwareConcurrency||(e.hardwareConcurrency=t.rt.cores),e.deviceMemory||(e.deviceMemory=Math.min(2**Math.round(Math.log2(t.rt.memory.total/1073741824)),8)),e.permissions||(e.permissions={query:r=>t.rt.perms.querySync(r)}),t.rt.variant){case"Node":case"Bun":break;case"Deno":break}switch(t.rt.variant){case"Deno":{let r=Worker;self.Worker=class extends EventTarget{#e;postMessage(s,n){this.#e.postMessage(s,n)}terminate(){this.#e.terminate()}constructor(s,n={}){super();let i=this;s=new URL(s,`file://${t.rt.cwd()}/`).href,(!n.type||n.type=="classic")&&(n.type="module"),i.#e=new r(s,n),i.#e.addEventListener("message",({data:o,origin:a,source:l,ports:d})=>{i.dispatchEvent(new MessageEvent("message",{data:o,origin:a,source:l,ports:d}))}),i.#e.addEventListener("error",({message:o,filename:a,lineno:l,colno:d,error:p})=>{i.dispatchEvent(new ErrorEvent("error",{message:o,filename:a,lineno:l,colno:d,error:p||new Error(o,a,l)}))}),i.#e.addEventListener("messageerror",({data:o})=>{i.dispatchEvent(new MessageEvent("messageerror",{data:o,origin,source,ports}))})}};break}case"Node":{self.Worker=class extends EventTarget{#e;#t={};addEventListener(r,s,n){let i=this,o=function(a){if(a.data?.wbType=="!ErrorEvent"){for(let l in a.data)l!="wbType"&&(a[l]=a.data[l]);delete a.data}s.call(i,a)};i.#t[s]=o,super.addEventListener(r,o,n)}postMessage(r,s){this.#e.postMessage(r,s)}terminate(){this.#e.terminate()}constructor(r,s={}){super();let n=this;r=new URL(new URL(r,`file://${t.rt.cwd()}/`).href),s.env=s.env||workerThreads.SHARE_ENV,n.#e=new workerThreads.Worker(r,s),n.#e.on("message",i=>{n.dispatchEvent(new MessageEvent("message",{data:i,origin:r}))}),n.#e.on("error",i=>{let{message:o,filename:a,lineno:l,colno:d}=i;n.dispatchEvent(new MessageEvent("error",{data:{error:i,message:o,filename:a,lineno:l,colno:d,wbType:"!ErrorEvent"}}))}),n.#e.on("messageerror",i=>{n.dispatchEvent(new MessageEvent("messageerror",{data:i,origin:r}))})}},workerThreads.isMainThread||(self.postMessage=function(r,s){workerThreads.parentPort.postMessage(r,s)},self.addEventListener=function(r,s){switch(r){case"message":{workerThreads.parentPort.on("message",n=>{s.call(self,new MessageEvent("message",{data:n}))});break}}});break}}};self.ChokerStream=N;let u,ne=(u=class{},c(u,"args",S.args),c(u,"main",S.main),c(u,"version",g.version),c(u,"rt",T),c(u,"env",x),c(u,"file",C),c(u,"net",P),c(u,"web",I),c(u,"util",U),u);F(ne);export{ne as WingBlade};
